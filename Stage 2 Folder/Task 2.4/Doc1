import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

sift_df = pd.read_csv('https://raw.githubusercontent.com/HackBio-Internship/public_datasets/main/R/datasets/sift.tsv', sep='\t')
foldx_df = pd.read_csv('https://raw.githubusercontent.com/HackBio-Internship/public_datasets/main/R/datasets/foldX.tsv', sep='\t')

print(f"SIFT Data Columns: {list(sift_df.columns)}")
print(f"FoldX Data Columns: {list(foldx_df.columns)}")

# Getting the exact column names
sift_combined_col = list(sift_df.columns)[0]
foldx_combined_col = list(foldx_df.columns)[0]

try:
    sift_split = sift_df[sift_combined_col].astype(str).str.split(' ', n=2, expand=True)
    # Assign the split parts, handling potential missing columns with .get()
    sift_df['Protein'] = sift_split.get(0)
    sift_df['Amino_Acid'] = sift_split.get(1)
    sift_df['sift_Score_temp'] = sift_split.get(2)
    sift_df = sift_df.drop(columns=[sift_combined_col])
    print(f"SIFT Data Head after split attempt: {sift_df.head()}")
except ValueError as e:
    print(f"Error splitting SIFT DataFrame: {e}")

try:
    foldx_split = foldx_df[foldx_combined_col].astype(str).str.split(' ', n=2, expand=True)
    # Assign the split parts, handling potential missing columns with .get()
    foldx_df['Protein'] = foldx_split.get(0)
    foldx_df['Amino_Acid'] = foldx_split.get(1)
    foldx_df['foldX_Score_temp'] = foldx_split.get(2)
    foldx_df = foldx_df.drop(columns=[foldx_combined_col])
    print(f"FoldX Data Head after split attempt: {foldx_df.head()}")
except ValueError as e:
    print(f"Error splitting FoldX DataFrame: {e}")

if 'Protein' in sift_df.columns and 'Amino_Acid' in sift_df.columns and 'sift_Score_temp' in sift_df.columns and \
   'Protein' in foldx_df.columns and 'Amino_Acid' in foldx_df.columns and 'foldX_Score_temp' in foldx_df.columns:

    sift_df['SIFT_Score'] = sift_df['sift_Score_temp']
    foldx_df['FoldX_Score'] = foldx_df['foldX_Score_temp']
    sift_df = sift_df.drop(columns=['sift_Score_temp'])
    foldx_df = foldx_df.drop(columns=['foldX_Score_temp'])

    sift_df['specific_Protein_aa'] = f"{sift_df['Protein']}_{sift_df['Amino_Acid']}"
    foldx_df['specific_Protein_aa'] = f"{foldx_df['Protein']}_{foldx_df['Amino_Acid']}"

    # Merge Datasets
    merged_df = pd.merge(sift_df, foldx_df, on='specific_Protein_aa', how='inner')
    print(f"Merged Data Head:{merged_df.head()}")

    # Identify Deleterious Mutations
    deleterious_mutations = merged_df[(merged_df['SIFT_Score'].astype(float) < 0.05) & (merged_df['FoldX_Score'].astype(float) > 2)]
    print(f"Deleterious Mutations (SIFT < 0.05 and FoldX > 2):{deleterious_mutations}")

    if not deleterious_mutations.empty:
        deleterious_mutations['Original_AA'] = deleterious_mutations['Amino_Acid'].str[0]
        most_impacted_aa = deleterious_mutations['Original_AA'].value_counts().idxmax()
        print(f"Amino Acid with Most Frequent Deleterious Mutations (Original): {most_impacted_aa}")
    else:
        print("No deleterious mutations found based on the criteria.")

    # Amino Acid Frequency Table
    sift_df['Original_AA'] = sift_df['Amino_Acid'].str[0]
    aa_frequency = sift_df['Original_AA'].value_counts()
    print(f"Amino Acid Frequency Table (from SIFT data):{aa_frequency}")

    # Bar Plot and Pie Chart
    plt.figure(figsize=(12, 5))
    plt.subplot(1, 2, 1)
    sns.barplot(x=aa_frequency.index, y=aa_frequency.values)
    plt.xlabel('Amino Acid')
    plt.ylabel('Frequency')
    plt.title('Frequency of Amino Acids (SIFT Data)')
    plt.subplot(1, 2, 2)
    plt.pie(aa_frequency, labels=aa_frequency.index, autopct='%1.1f%%', startangle=90)
    plt.title('Proportion of Amino Acids (SIFT Data)')
    plt.tight_layout()
    plt.show()


print(f"""
Observations for Biochemistry & Oncology Task:

• Highest impact amino acid (original): R (Arginine)

• Arginine (R):
  - Positively charged, polar amino acid.
  - Frequently involved in hydrogen bonding and salt bridge formation.
  - Commonly found at protein active/binding sites.

• Frequently occurring amino acids (from SIFT data):
  - R (Arginine), G (Glycine), P (Proline), A (Alanine)

• Structural & functional observations:
  - Glycine (G): Smallest residue, it adds flexibility to protein backbone.
  - Proline (P): Rigid structure, introduces kinks; often found in turns.
  - Alanine (A): Small, non-polar; it frequently appears in alpha helices.
  - Arginine (R): Critical for binding negatively charged ligands or DNA/RNA.
""")
